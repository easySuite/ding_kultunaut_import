<?php
/**
 * @file
 * Handling events import from Kultunaut service.
 */

const EVENT_CATEGORY_FORMAT = 'ding_wysiwyg';

/**
 * Implements hook_menu().
 */
function ding_kultunaut_import_menu() {
  $items = array();

  $items['admin/config/ding_event/event_import'] = array(
    'title' => 'Kultunaut events import settings',
    'description' => 'Settings page for events import.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_kultunaut_import_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ding_kultunaut_import.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_cron().
 */
function ding_kultunaut_import_cron() {
  $data = file_get_contents(variable_get('ding_kultunaut_import_url'));

  $headers = implode("\r\n", $http_response_header);

  if (strpos($headers, 'xml') === FALSE) {
    watchdog(
      'kultunaut',
      'Failed to fetch XML: %error',
      array('%error' => $data),
      WATCHDOG_ERROR
    );
  }
  else {
    $xml = simplexml_load_string($data);

    if ($xml !== FALSE) {
      $i = 0;
      foreach ($xml->arrlist->arr as $item) {
        $existing = db_select('imported_events', 'i')
          ->fields('i', array('eid'))
          ->condition('eid', (string) $item->eventid, '=')
          ->execute()
          ->fetchField();

        if (!$existing) {
          $node = new stdClass();
          $node->type = 'ding_event';
          $node->language = LANGUAGE_NONE;
          $node->promote = 1;
          $node->title = (string) $item->overskrift;
          $image = _ding_kultunaut_import_fetch_image((string) $item->billede);
          $image = (array) $image;
          $node->field_ding_event_title_image[LANGUAGE_NONE][] = $image;
          $node->field_ding_event_list_image[LANGUAGE_NONE][] = $image;
          $node->field_ding_event_lead[LANGUAGE_NONE]['0']['value'] = (string) $item->beskrivelse;
          $node->field_ding_event_category[LANGUAGE_NONE]['0']['tid'] = _ding_kultunaut_import_category((string) $item->kategori);
          $node->field_ding_event_date[LANGUAGE_NONE][] = _ding_kultunaut_import_event_date($item->startdato, $item->slutdato, $item->tid);
          $node->og_group_ref[LANGUAGE_NONE][0]['target_id'] = _ding_kultunaut_import_library((string) $item->sted);
          if (module_exists('domain')) {
            $domains = variable_get('ding_kultunaut_import_domains', array());
            $node->domain_site = FALSE;
            $node->domains = $domains;
          }
          node_save($node);
          db_insert('imported_events')
            ->fields(array(
              'nid' => $node->nid,
              'eid' => (string) $item->eventid,
            ))
            ->execute();
          $i++;
        }
      }

      watchdog('kultunaut', 'Was imported @count nodes.', array('@count' => $i));
    }
    else {
      watchdog('kultunaut', 'Error while requesting XML feed.');
    }
  }
}

/**
 * Callback for preparing library field for imported node.
 *
 * @param string $title
 *   Title string from XML.
 */
function _ding_kultunaut_import_library($title) {
  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'ding_library', '=')
    ->condition('title', $title, '=')
    ->execute();
  $result = $query->fetchField();

  if (!$result) {
    $node = new stdClass();
    $node->type = 'ding_library';
    $node->title = $title;
    node_save($node);
    $nid = $node->nid;
  }
  else {
    $nid = $result;
  }

  return $nid;
}

/**
 * Handler for event date creation.
 *
 * @param string $startdate
 *   Event's start date.
 * @param string $enddate
 *   Event's end date.
 * @param string $time
 *   Event's time.
 *
 * @return array
 *   Array of values to be saved in event date field.
 */
function _ding_kultunaut_import_event_date($startdate, $enddate, $time) {
  $startdate = DateTime::createFromFormat('Y-m-d', $startdate);
  $enddate = DateTime::createFromFormat('Y-m-d', $enddate);

  $enddate->setTime('0', '00');

  $tostrip = array(
    'kl. ' => '',
    'kl ' => '',
  );

  $time = strtr($time, $tostrip);

  switch ($startdate) {
    case (drupal_strlen($time) == 2):
      $startdate->setTime($time, '00');
      $enddate->setTime($time, '00');
      break;

    case (drupal_strlen($time) == 5):
      // Dot (.) delimiter.
      if (strpos($time, '.')) {
        $time = str_replace('.', ':', $time);
        $time = explode(':', $time);
        $startdate->setTime($time[0], $time[1]);
        $enddate->setTime($time[0], $time[1]);
      }
      // Minus (-) delimiter.
      elseif (strpos($time, '-')) {
        $period = explode('-', $time);
        $start = $period[0];
        $end = $period[1];
        $startdate->setTime($start, '00');
        $enddate->setTime($end, '00');
      }
      break;

    default:
      $startdate->setTime('0', '00');
      $enddate->setTime('0', '00');
      break;
  }

  // Changing timezone for correct time saving into DB.
  $startdate->setTimezone(new DateTimeZone("UTC"));
  $enddate->setTimezone(new DateTimeZone("UTC"));

  $startdate = $startdate->format('Y-m-d H:i');
  $enddate = $enddate->format('Y-m-d H:i');

  $dates = array(
    'value' => $startdate,
    'value2' => $enddate,
  );

  return $dates;
}

/**
 * Handler for category field.
 *
 * @param string $term_name
 *   Category term name.
 *
 * @return int
 *   Term ID.
 */
function _ding_kultunaut_import_category($term_name) {
  $arr_terms = taxonomy_get_term_by_name($term_name);
  $vocabulary = taxonomy_vocabulary_machine_name_load('event_category');
  if (!empty($arr_terms)) {
    $tid = key($arr_terms);
  }
  else {
    $term = new stdClass();
    $term->name = $term_name;
    $term->vid = $vocabulary->vid;
    $term->format = EVENT_CATEGORY_FORMAT;
    taxonomy_term_save($term);
    $tid = $term->tid;
  }
  return $tid;
}

/**
 * Get and save image.
 *
 * @param string $url
 *   URL to image from XML.
 *
 * @return object
 *   Image file object.
 */
function _ding_kultunaut_import_fetch_image($url) {
  $destination = file_default_scheme() . "://imported_events/" . md5($url) . ".jpg";

  // Get the folder for the final location of image.
  $directory = dirname($destination);

  // Build the destination folder tree if it doesn't already exist.
  if (!file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
    watchdog(
      'kultunaut',
      'Failed to create image directory: %directory',
      array('%directory' => $directory),
      WATCHDOG_ERROR
    );
    return FALSE;
  }

  // Download image.
  $result = drupal_http_request($url);

  // Return false if HTTP request failed.
  if ($result->code != 200) {
    watchdog(
      'kultunaut',
      "Can't download image %image into file",
      array('%image' => $url),
      WATCHDOG_DEBUG
    );
    return FALSE;
  }

  $file = file_save_data(file_get_contents($url), $destination, FILE_EXISTS_REPLACE);
  return $file;
}

/**
 * Implements hook_node_delete().
 */
function ding_kultunaut_import_node_delete($node) {
  db_delete('imported_events')
    ->condition('nid', $node->nid)
    ->execute();
}
