<?php
/**
 * @file
 * ding_kultunaut_import.module
 */

const EVENT_CATEGORY_VOCABULARY = 3;
const EVENT_CATEGORY_FORMAT = 'ding_wysiwyg';

/**
 * Implements hook_menu().
 */
function ding_kultunaut_import_menu() {
  $items = array();

  $items['admin/config/ding_event/event_import'] = array(
    'title' => 'Kultunaut events import settings',
    'description' => 'Settings page for events import.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_kultunaut_import_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ding_kultunaut_import.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_cron().
 */
function ding_kultunaut_import_cron() {
  $return = array();
  $data = file_get_contents(variable_get('ding_kultunaut_import_url'));

  $headers = implode("\r\n", $http_response_header);

  if (strpos($headers, 'xml') === FALSE) {
    watchdog(
      'kultunaut',
      'Failed to fetch XML: %error',
      array('%error' => $data),
      WATCHDOG_ERROR
    );
    return $return;
  }

  $xml = simplexml_load_string($data);
  if (empty($xml->arrlist->arr)) {
    return $return;
  }

  $i = 0;
  foreach ($xml->arrlist->arr as $item) {
    $existing = db_select('imported_events', 'i')
      ->fields('i', array('ieid'))
      ->condition('ieid', (string) $item->eventid, '=')
      ->execute()
      ->fetchField();

    if (!$existing) {
      $node = new stdClass();
      $node->type = 'ding_event';
      $node->language = 'und';
      $node->promote = 1;
      $node->title = (string) $item->overskrift;
      $image = _ding_kultunaut_import_fetch_image((string) $item->billede);
      $image = (array) file_load($image->fid);
      $node->field_ding_event_title_image[LANGUAGE_NONE][] = $image;
      $node->field_ding_event_list_image[LANGUAGE_NONE][] = $image;
      $node->field_ding_event_lead[LANGUAGE_NONE]['0']['value'] = (string) $item->beskrivelse;
      $node->field_ding_event_category[LANGUAGE_NONE]['0']['tid'] = _ding_kultunaut_import_category((string) $item->kategori);
      $node->field_ding_event_date[LANGUAGE_NONE][0] = _ding_kultunaut_import_event_date($item->startdato, $item->slutdato, $item->tid);
      $node->og_group_ref[LANGUAGE_NONE][0]['target_id'] = _ding_kultunaut_import_library((string) $item->sted);
      node_save($node);
      db_insert('imported_events')
        ->fields(array(
          'nid' => $node->nid,
          'ieid' => (string) $item->eventid,
        ))
        ->execute();
      $i++;
    }
  }

  watchdog('kultunaut', 'Was imported @count nodes.', array('@count' => $i));
}

/**
 * Callback for preparing library field for imported node.
 *
 * @param string $title
 *   Title string from XML.
 */
function _ding_kultunaut_import_library($title) {
  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'ding_library', '=')
    ->condition('title', $title, '=')
    ->execute();
  $result = $query->fetchField();

  if (!$result) {
    $node = new stdClass();
    $node->type = 'ding_library';
    $node->title = $title;
    node_save($node);
    $nid = $node->nid;
  }
  else {
    $nid = $result;
  }

  return $nid;
}

/**
 * Handler for event date creation.
 *
 * @param string $startdate
 *   Event's start date.
 * @param string $enddate
 *   Event's end date.
 * @param string $time
 *   Event's time.
 *
 * @return array
 *   Array of values to be saved in event date field.
 */
function _ding_kultunaut_import_event_date($startdate, $enddate, $time) {
  $time = str_replace('kl. ', '', $time);
  if (drupal_strlen($time) == 2) {
    $time = $time - 2 . ":00";
  }
  else {
    $time = explode('.', $time);
    $hour = $time[0] - 2;
    $min = $time[1];
    $time = $hour . ':' . $min;
  }

  $dates = array(
    'value' => $startdate . ' ' . $time,
    'value2' => $enddate . ' ' . $time,
  );

  return $dates;
}

/**
 * Handler for category field.
 *
 * @param string $term_name
 *   Category term name.
 *
 * @return int
 *   Term ID.
 */
function _ding_kultunaut_import_category($term_name) {
  $arr_terms = taxonomy_get_term_by_name($term_name);
  if (!empty($arr_terms)) {
    $arr_terms = array_values($arr_terms);
    $tid = $arr_terms[0]->tid;
  }
  else {
    $term = new stdClass();
    $term->name = $term_name;
    $term->vid = EVENT_CATEGORY_VOCABULARY;
    $term->format = EVENT_CATEGORY_FORMAT;
    taxonomy_term_save($term);
    $tid = $term->tid;
  }
  return $tid;
}


/**
 * Create path to image.
 *
 * @param string $url
 *   URL to image from XML.
 *
 * @return string
 *   Generated file URI.
 */
function _ding_kultunaut_import_image_path($url) {
  return file_default_scheme() . "://imported_events/" . md5($url) . ".jpg";
}

/**
 * Get and save image.
 *
 * @param string $url
 *   URL to image from XML.
 *
 * @return object
 *   Image file object.
 */
function _ding_kultunaut_import_fetch_image($url) {

  $image = _ding_kultunaut_import_image_path($url);

  // Do not download the image again if it exists.
  if (file_exists($image)) {
    return $image;
  }

  // Get the folder for the final location of image.
  $directory = dirname($image);

  // Build the destination folder tree if it doesn't already exist.
  if (!file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
    watchdog(
      'kultunaut',
      'Failed to create image directory: %directory',
      array('%directory' => $directory),
      WATCHDOG_ERROR
    );
    return FALSE;
  }

  // Download image.
  $result = drupal_http_request($url);
  watchdog(
    'kultunaut',
    'Downloading image %image into %file',
    array('%image' => $url, '%file' => $image),
    WATCHDOG_DEBUG
  );

  // Return false if HTTP request failed.
  if ($result->code != 200) {
    return FALSE;
  }

  return file_save_data($result->data, $directory, FILE_EXISTS_REPLACE);
}

/**
 * Implements hook_node_delete().
 */
function ding_kultunaut_import_node_delete($node) {
  db_delete('imported_events')
    ->condition('nid', $node->nid)
    ->execute();
}
